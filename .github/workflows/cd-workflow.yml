name: ecr push image
on:
  # pull_request:
  #   branches:
  #     - main
  #   types: [closed]
  push:

jobs:
  push:
    name: deploy to ECR and ECS
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # `permissions` を設定しないと OIDC が使えないので注意
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      # AWS CLIデバッグ出力を設定
      - name: Set AWS CLI Debug Output
        run: |
          echo "AWS_DEFAULT_OUTPUT=text" >> $GITHUB_ENV
          echo "AWS_PAGER=" >> $GITHUB_ENV
          echo "AWS_DEBUG=true" >> $GITHUB_ENV
          
      # AWS 認証
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: 'ap-northeast-1' # リージョンを指定
          role-to-assume: 'arn:aws:iam::925173743335:role/oidc-role'

      # ECR ログイン
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr # outputs で参照するために id を設定

      - name: build and push docker image to ECR
        env:
          # ECR レジストリを `aws-actions/amazon-ecr-login` アクションの `outputs.registry` から取得
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: "twitter-clone" # イメージを push する ECR リポジトリ名
          IMAGE_TAG: ${{ github.sha }} # イメージタグ。 Git のコミットハッシュにしておく
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
      
      - name: deploy to ECS
        run: |
          aws ecs update-service --cluster ProjectA-ecs-cluster --service ProjectA-esc-service2 --force-new-deployment
          aws ecs wait services-stable --cluster ProjectA-ecs-cluster --service ProjectA-esc-service2
          aws ecs describe-services --cluster ProjectA-ecs-cluster --service ProjectA-esc-service2